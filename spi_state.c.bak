/* Microchip Technology Inc. and its subsidiaries.  You may use this software 
 * and any derivatives exclusively with Microchip products. 
 * 
 * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".  NO WARRANTIES, WHETHER 
 * EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED 
 * WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A 
 * PARTICULAR PURPOSE, OR ITS INTERACTION WITH MICROCHIP PRODUCTS, COMBINATION 
 * WITH ANY OTHER PRODUCTS, OR USE IN ANY APPLICATION. 
 *
 * IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
 * INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND 
 * WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS 
 * BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE 
 * FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS 
 * IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF 
 * ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
 *
 * MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF THESE 
 * TERMS. 
 */

/*******************************************************************************
  This source file has NOT been generated by the MHC
 *******************************************************************************/

/* 
 * File:   
 * Author: 
 * Comments:
 * Revision history: 
 */

// *****************************************************************************
// *****************************************************************************
// Section: Included Files 
// *****************************************************************************
// *****************************************************************************

#include "app.h"

// *****************************************************************************
// *****************************************************************************
// Section: Global Data Definitions
// *****************************************************************************
// *****************************************************************************
SPI_DATA spiAppData;
extern TIMER_DATA timerData;
unsigned char i;
unsigned char mydata[26];
unsigned char writeParameter[2];
unsigned char temp [3];


// *****************************************************************************
// *****************************************************************************
// Section: User Functions
// *****************************************************************************
// *****************************************************************************


void spiService(void)
{
    switch (spiAppData.state)
    {
        case SPI_ENABLE:
            spiAppData.state = SPI_ADS_INIT;
            break;
        
        case SPI_READ_EEPROM: 
            //read 3 times
            spiAppData.state = SPI_ADS_INIT;
            break;
            
        case SPI_ADS_INIT: 
            ADS1299Init();
            spiAppData.state = SPI_READ_ADS_ID;
            break;
            
            
        case SPI_WRITE_CMD:
            LEDToggle(LED_status, PORT_A);

//            DRV_SPI0_BufferAddWriteRead(&temp, &rxBuffer, 2);
            spiAppData.state = SPI_WAIT_FOR_REPLY;
            break;
            
        
        case SPI_START_WRITE_REG:
            writeParameter[0] = SDATAC;
            spiAppData.state = SPI_WRITE_CMD;
            break;
            
        case SPI_READ_ADS_ID:
            LEDOn(LED_status, PORT_A);
            ADS_ReadREG(ID,&rxBuffer[0],1);
            spiAppData.state = SPI_COMPLETE;
            
            //for debugging purpose only 
            //spiAppData.state = SPI_START_CONVERSION;
            
            break;

        case SPI_GET_DATA:
//            DRV_SPI0_BufferAddWriteRead(&temp, &rxBuffer, 2);
            spiAppData.state = SPI_WAIT_FOR_DATA;
            break;
        
        case SPI_WAIT_FOR_DATA:  
            APP_SPI_CS_DESELECT();
            spiAppData.state = SPI_COMPLETE;
           break;
        
        case SPI_START_CONVERSION:
            
            // Status LED should blink while data conversion is running
            timerData.timerState = TIMER_STATE_START;       
            
            dma_Buffer_Init();              // flush RingBuffer and set Vars
            ADS1299_START = 1;				// start collecting data
            delay_us(4);
            ADS_WriteCOM(RDATAC);			// read ADS data continuously
            delay_us(4);
            APP_SPI_CS_SELECT();
            delay_us(4);
            spiAppData.state = SPI_COMPLETE;
            break;
        
        
        case SPI_STOP_CONVERSION:
            
            timerData.timerState = TIMER_STATE_STOP;

            ADS1299_START = 0;				// stop collecting data
            delay_us(4);
            ADS_WriteCOM(SDATAC);			// stop reading ADS data continuously
            delay_us(4);
            APP_SPI_CS_SELECT();
            delay_us(4);
            spiAppData.state = SPI_COMPLETE;
            break;
  
        case SPI_COMPLETE:
        
        case SPI_ERROR:
           
           break; /* end of function */
    }
}