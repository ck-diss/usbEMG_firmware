/* ************************************************************************** */
/** Descriptive File Name

  @Company
    Company Name

  @File Name
    filename.c

  @Summary
    Brief description of the file.

  @Description
    Describe the purpose of this file.
 */
/* ************************************************************************** */

/* ************************************************************************** */
/* ************************************************************************** */
/* Section: Included Files                                                    */
/* ************************************************************************** */
/* ************************************************************************** */

/* This section lists the other files that are included in this file.
 */

#include "usb_state.h"
#include "app.h"
#include <stdbool.h>

/* ************************************************************************** */
/* ************************************************************************** */
/* Section: File Scope or Global Data                                         */
/* ************************************************************************** */
/* ************************************************************************** */

/*  A brief description of a section can be given directly below the section
    banner.
 */

/* ************************************************************************** */
/** Descriptive Data Item Name

  @Summary
    Brief one-line summary of the data item.
    
  @Description
    Full description, explaining the purpose and usage of data item.
    <p>
    Additional description in consecutive paragraphs separated by HTML 
    paragraph breaks, as necessary.
    <p>
    Type "JavaDoc" in the "How Do I?" IDE toolbar for more information on tags.
    
  @Remarks
    Any additional remarks
 */
extern SPI_DATA spiAppData;
extern unsigned int rb_size;
extern APP_DATA appData;
USB_DATA usbAppData;

/* Receive data buffer */
uint8_t receivedDataBuffer[USB_READ_BUFFER_SIZE] USB_MAKE_BUFFER_DMA_READY;

/* Transmit data buffer */
uint8_t  transmitDataBuffer[USB_READ_BUFFER_SIZE] USB_MAKE_BUFFER_DMA_READY;

/* The endpoint size is 64 for FS and 512 for HS */
uint16_t endpointSize;

int packet_cnt = 0;
#define USB_ISOLATOR_ACTIVATE   LATAbits.LATA10   

// LED parameters
//#define LED_GREEN   LATBbits.LATB3      // for device status
//#define LED_ORANGE  LATAbits.LATA9      // for ADS-1299 Information
//#define LED_ON      0
//#define LED_OFF     1

#define USB_COMMAND_ENDPOINT_RX 0x01
#define USB_COMMAND_ENDPOINT_TX 0x81
#define USB_DATA_ENDPOINT_TX    0x82


bool flgDatasend = false;

// *****************************************************************************
// *****************************************************************************
// Section: Application Callback Functions
// *****************************************************************************
// *****************************************************************************

/*********************************************
 * Application USB Device Layer Event Handler
 *********************************************/

void APP_USBDeviceEventHandler(USB_DEVICE_EVENT event, void * eventData, uintptr_t context)
{
    uint8_t * configurationValue;
    USB_SETUP_PACKET * setupPacket;
    switch(event)
    {
        case USB_DEVICE_EVENT_RESET:
        case USB_DEVICE_EVENT_DECONFIGURED:

            /* Device is reset or de-configured. Provide LED indication.*/
            //LEDOn(LED_status, PORT_A);
            //LEDOff(LED_power, PORT_B);
            usbAppData.deviceIsConfigured = false;

            break;

        case USB_DEVICE_EVENT_CONFIGURED:

            /* Check the configuration */
            configurationValue = (uint8_t *)eventData;
            if(*configurationValue == 1 )
            {
                /* The device is in configured state. Update LED indication */
                //LEDOff(LED_status, PORT_A);
                //LEDOff(LED_power, PORT_B);
                /* Reset endpoint data send & receive flag  */
                usbAppData.deviceIsConfigured = true;
            }
            break;

        case USB_DEVICE_EVENT_SUSPENDED:

            /* Device is suspended. Update LED indication */
            //LEDOn(LED_status, PORT_A);
            //LEDOn(LED_power, PORT_B);
            break;


        case USB_DEVICE_EVENT_POWER_DETECTED:

            /* VBUS is detected. Attach the device */
            USB_ISOLATOR_ACTIVATE = 1;  //activate USB isolator with pin RA10
            USB_DEVICE_Attach(usbAppData.usbDevHandle);
            break;

        case USB_DEVICE_EVENT_POWER_REMOVED:

            /* VBUS is removed. Detach the device */
            USB_DEVICE_Detach (usbAppData.usbDevHandle);
            break;

        case USB_DEVICE_EVENT_CONTROL_TRANSFER_SETUP_REQUEST:
            /* This means we have received a setup packet */
            setupPacket = (USB_SETUP_PACKET *)eventData;
            if(setupPacket->bRequest == USB_REQUEST_SET_INTERFACE)
            {
                /* If we have got the SET_INTERFACE request, we just acknowledge
                 for now. This demo has only one alternate setting which is already
                 active. */
                USB_DEVICE_ControlStatus(usbAppData.usbDevHandle,USB_DEVICE_CONTROL_STATUS_OK);
            }
            else if(setupPacket->bRequest == USB_REQUEST_GET_INTERFACE)
            {
                /* We have only one alternate setting and this setting 0. So
                 * we send this information to the host. */
                USB_DEVICE_ControlSend(usbAppData.usbDevHandle, &usbAppData.altSetting, 1);
            }
            else
            {
                /* We have received a request that we cannot handle. Stall it*/
                USB_DEVICE_ControlStatus(usbAppData.usbDevHandle, USB_DEVICE_CONTROL_STATUS_ERROR);
            }
            break;

        case USB_DEVICE_EVENT_ENDPOINT_READ_COMPLETE:
           /* Endpoint read is complete */
            usbAppData.epDataReadPending = false;
            break;

        case USB_DEVICE_EVENT_ENDPOINT_WRITE_COMPLETE:
            /* Endpoint write is complete */
            usbAppData.epDataWritePending = false;
            break;

        /* These events are not used in this demo. */
        case USB_DEVICE_EVENT_RESUMED:
        case USB_DEVICE_EVENT_ERROR:
        default:
            break;
    }
}

/* ************************************************************************** */
/* ************************************************************************** */
// Section: Application Local Functions                                                   */
/* ************************************************************************** */
/* ************************************************************************** */

void USB_allEndpointEnable()
{
    if (USB_DEVICE_EndpointIsEnabled(usbAppData.usbDevHandle, usbAppData.endpointRx) == false )
    {
        /* Enable Read EP1Rx Command Endpoint */
        USB_DEVICE_EndpointEnable(usbAppData.usbDevHandle, 0, usbAppData.endpointRx,
                USB_TRANSFER_TYPE_BULK, endpointSize);
    }
    if (USB_DEVICE_EndpointIsEnabled(usbAppData.usbDevHandle, usbAppData.endpointTx) == false )
    {
        /* Enable Write EP1Tx Command Endpoint */
        USB_DEVICE_EndpointEnable(usbAppData.usbDevHandle, 0, usbAppData.endpointTx,
                USB_TRANSFER_TYPE_BULK, endpointSize);
    }

    if (USB_DEVICE_EndpointIsEnabled(usbAppData.usbDevHandle, usbAppData.dataendpointTx) == false )
    {
        /* Enable Write EP2Tx Data Endpoint */
        USB_DEVICE_EndpointEnable(usbAppData.usbDevHandle, 0, usbAppData.dataendpointTx,
                USB_TRANSFER_TYPE_BULK, endpointSize);
    }
}

// Endpoints disable
void USB_allEndpointDisable()
{
    // Disable all endpoints, EP1Rx, EP1Tx, EP2Tx respectively.
    USB_DEVICE_EndpointDisable(usbAppData.usbDevHandle, usbAppData.endpointRx);
    USB_DEVICE_EndpointDisable(usbAppData.usbDevHandle, usbAppData.endpointTx);
    USB_DEVICE_EndpointDisable(usbAppData.usbDevHandle, usbAppData.dataendpointTx);
}

void USB_EndpointDisable(USB_ENDPOINT_ADDRESS endpoint)
{
    USB_DEVICE_EndpointDisable(usbAppData.usbDevHandle, endpoint);
}

void USB_EndpointEnable(USB_ENDPOINT_ADDRESS endpoint)
{
    if (USB_DEVICE_EndpointIsEnabled(usbAppData.usbDevHandle, endpoint) == false )
    {
        /* Enable Read EP1Rx Command Endpoint */
        USB_DEVICE_EndpointEnable(usbAppData.usbDevHandle, 0, endpoint,
                USB_TRANSFER_TYPE_BULK, endpointSize);
    }  
}

void USB_EndpointRestart(USB_ENDPOINT_ADDRESS endpoint)
{
   USB_EndpointDisable(endpoint);
   USB_EndpointEnable(endpoint);
}
// Sending Data stream through EP2Tx Data Endpoint
bool USBSendData(unsigned char* rb_buffer, unsigned int* rb_read)
{
    unsigned int i;
    packet_cnt++; 

    for (i=0; i<USB_PACKET_SIZE; i++)
    {
        transmitDataBuffer[i] = rb_buffer[(*rb_read)++];
        if (packet_cnt == 3)
        {
            Nop();
        }
    }

    usbAppData.epDataWritePending = true;

    /*--------- Writing data to EP2Tx for USB transmission to host-----------*/
    USB_DEVICE_EndpointWrite ( usbAppData.usbDevHandle, &usbAppData.writeTranferHandle,
            usbAppData.dataendpointTx, &transmitDataBuffer[0],
            sizeof(transmitDataBuffer),
            USB_DEVICE_TRANSFER_FLAGS_MORE_DATA_PENDING);
    
    return true;
}

// Selecting whick task to work on from a received command packet
bool usbCommandSelection(uint8_t UsbCommand[])
{
    switch(UsbCommand[0])
    {
        // Check if packet is a Control command
        case USB_COMMAND_PACKET:    // 0x55
        
            // Check command type
            switch(UsbCommand[5])
            {
                // ----- ADS1299 Commands ----- //
                case USB_ADS_PACKET :                           // 0xAD
                {
                    //Check ADS1299 Instructions 
                    switch(UsbCommand[7])
                    {
                        // ----- SPI System Commands ----- //
                        case WAKEUP:    // 0x02 : Wake up from Standby mode
                            ADS_WriteCOM(WAKEUP);
                            break;
                        case STANDBY:   // 0x04 : Enter standby mode
                            ADS_WriteCOM(STANDBY);
                            break;
                        case RESET:     // 0x06 : Reset the device
                            ADS_WriteCOM(RESET);
                            break;
                        case START:     // 0x08 : Start & restart (synchronize) conversion
                            // Hard wired to RA0, no function in this implementation
                            break;
                        case STOP:      // 0x0A : Stop conversion
                            // Hard wired to RA0, no function in this implementation
                            break;
                            
                        // ----- Data Read Commands ----- //
                        case RDATAC:    // 0x10 : Enable Read Data Continuous mode
                            spiAppData.state = SPI_START_CONVERSION;
                            break;
                        case SDATAC:    // 0x11 : Stop Read Data Continuous mode
                            spiAppData.state = SPI_STOP_CONVERSION;
                            break;
                        case RDATA:     // 0x12 : Read data by command
                            //Reading a single data is not needed, no function in this implementation
                            break;
                            
                        // ----- Register Read Commands ----- //    
                        case RREG:      // 0x20 : RREG: Read n nnnn registers starting at addr r rrrr
                            // (UsbCommand[7] & 0xE0)
                            break;
                        case WREG:      // 0x40 : Write n nnnn registers starting at addr r rrrr
                            break;
                    }
                    break;
                }
                
                // ----- MCU Commands ----- //
                case USB_MCU_INFO_PACKET:                       // 0x00
                    break;
                case USB_MCU_GET_UNIX_TIMESTAMP_32_BIT_PACKET:  // 0xF0
                    break;
                case USB_MCU_SET_UNIX_TIMESTAMP_32_BIT_PACKET:  // 0xF1
                    break;
                case USB_MCU_GET_DAQ_TIMER_24_BIT_PACKET:       // 0xF2
                    break;
                case USB_MCU_SET_DAQ_TIMER_24_BIT_PACKET:       // 0xF3
                    break;
                case USB_MCU_GET_3V_SUPPLY_PACKET:              // 0xF4
                    break;
                case USB_MCU_SET_3V_SUPPLY_PACKET:              // 0xF5
                    break;
                case USB_MCU_GET_STATUS_LED_PACKET:             // 0xF6
                    break;
                case USB_MCU_SET_STATUS_LED_PACKET:             // 0xF7
                    break;
                case USB_MCU_SEND_ERROR_PACKET :                // 0xEE
                    break;
                
                
                // ----- LED Driver Command ----- //
                case USB_LED_DRIVER_PACKET :                    // 0xD0
                    break;
                
                
                // ----- EEPROM Command ----- //
                case USB_EEPROM_PACKET :                        // 0xD1
                    break;
            }
            break;   

        case USB_DEVICE_RESET:  // 0x80 : Device reset (All modules re-initialized)
            appData.state = APP_STATE_INIT;
            break;                        

        default:
            break;
    }    
}
// *****************************************************************************
// *****************************************************************************
// Section: Application Initialization and State Machine Functions
// *****************************************************************************
// *****************************************************************************

/*******************************************************************************
  Function:
    void usb_Initialize ( void )

  Remarks:
    See prototype in app.h.
 */
int usb_Initialize ( void )
{
    /* Set all initial parameters of USB module. */
    usbAppData.state = USB_STATE_INIT;
    usbAppData.usbDevHandle = USB_DEVICE_HANDLE_INVALID;
    usbAppData.deviceIsConfigured = false;
    
    usbAppData.endpointRx = USB_COMMAND_ENDPOINT_RX;
    usbAppData.endpointTx = USB_COMMAND_ENDPOINT_TX;
    usbAppData.dataendpointTx = USB_DATA_ENDPOINT_TX;
    
    usbAppData.epDataReadPending = false;
    usbAppData.epDataWritePending = false;
    usbAppData.altSetting = 0;
   
    return 1;
}

/******************************************************************************
  Function:
    void usbService ( void )

  Remarks:
    See prototype in app.h.
 */

void usbService ( void )
{
    switch(usbAppData.state)
    {
        case USB_STATE_INIT:
            /* Open the device layer */
            usbAppData.usbDevHandle = USB_DEVICE_Open( USB_DEVICE_INDEX_0,
                    DRV_IO_INTENT_READWRITE );

            if(usbAppData.usbDevHandle != USB_DEVICE_HANDLE_INVALID)
            {
                /* Register a callback with device layer to get event notification (for end point 0) */
                USB_DEVICE_EventHandlerSet(usbAppData.usbDevHandle,  APP_USBDeviceEventHandler, 0);

                usbAppData.state = USB_STATE_WAIT_FOR_CONFIGURATION;
            }
            else
            {
                /* The Device Layer is not ready to be opened. We should try
                 * again later. */
            }

            break;

        case USB_STATE_WAIT_FOR_CONFIGURATION:

            /* Check if the device is configured */
            if(usbAppData.deviceIsConfigured == true)
            {
                if (USB_DEVICE_ActiveSpeedGet(usbAppData.usbDevHandle) == USB_SPEED_FULL)
                {
                    endpointSize = 64;
                }
                else if (USB_DEVICE_ActiveSpeedGet(usbAppData.usbDevHandle) == USB_SPEED_HIGH)
                {
                    endpointSize = 512;
                }
                
                //--------------------- Endpoints Enable --------------------//
                USB_allEndpointEnable();
                
                /* Indicate that we are waiting for read */
                usbAppData.epDataReadPending = true;

                /* Place a new read request. */
                USB_DEVICE_EndpointRead(usbAppData.usbDevHandle, &usbAppData.readTranferHandle,
                        usbAppData.endpointRx, &receivedDataBuffer[0], sizeof(receivedDataBuffer) );

                /* Device is ready to run the main task */
                usbAppData.state = USB_STATE_MAIN_TASK;
            }
            break;

        case USB_STATE_MAIN_TASK:

            if(!usbAppData.deviceIsConfigured)
            {
                /* This means the device got de-configured. Change the
                 * application state back to waiting for configuration. */
                usbAppData.state = USB_STATE_WAIT_FOR_CONFIGURATION;

                /* Disable the endpoint*/
                USB_allEndpointDisable();
                usbAppData.epDataReadPending = false;
                usbAppData.epDataWritePending = false;
            }
            
            // Reading Command via EP1Rx via USB port, choose which task to be operated
            else if (usbAppData.epDataReadPending == false)
            {
                /* Look at the data sent from the host, to see what kind of
                 * application specific command it sent. */
                
                // Choose which task to do with usbCommandSelection()
                if(usbCommandSelection(receivedDataBuffer))
                    usbAppData.epDataReadPending = true ;          
                
                /* Place a new read request. */
                USB_DEVICE_EndpointRead ( usbAppData.usbDevHandle, &usbAppData.readTranferHandle,
                            usbAppData.endpointRx, &receivedDataBuffer[0], sizeof(receivedDataBuffer) );
            }
            
            // Sending Data from rb_buffer to EP2Tx via USB port, if data are ready to be sent
            if (usbAppData.epDataWritePending == false)
            {
                   if (rb_size > USB_PACKET_SIZE) // checking if rb_buffer is filled
                    {
                        if (USBSendData(&rb_buffer , &rb_read)) // Data is sent here
                        {
                            rb_size -= USB_PACKET_SIZE;	

                            if (rb_read==RB_LENGTH)		// adjust write pointer
                                rb_read = 0;	
                        }
                    }
            }
            
            break;

        case USB_STATE_ERROR:
            break;

        default:
            break;
    } 
}
/* *****************************************************************************
 End of File
 */
